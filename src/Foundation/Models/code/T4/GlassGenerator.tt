<#@ assembly name="$(SolutionDir)lib\CodeGenerator\Sitecore.CodeGenerator.dll" #>
<#@ assembly name="$(SolutionDir)packages\Sitecore.Kernel.NoReferences.8.2.161221\lib\NET452\Sitecore.Kernel.DLL" #>
<#@ assembly name="$(SolutionDir)packages\Glass.Mapper.Sc.Core.4.3.4.196\lib\100\Glass.Mapper.Sc.DLL" #>
<#@ assembly name="$(SolutionDir)packages\Rainbow.Core.1.4.1\lib\net452\Rainbow.dll" #>
<#@ assembly name="$(SolutionDir)packages\Rainbow.Storage.Sc.1.4.1\lib\net452\Rainbow.Storage.Sc.dll" #>
<#@ assembly name="$(SolutionDir)packages\Rainbow.Storage.Yaml.1.4.1\lib\net452\Rainbow.Storage.Yaml.dll" #>
<#@ assembly name="$(SolutionDir)src\Foundation\Models\code\bin\Car.Foundation.Models.DLL" #>
<#@ import namespace="Sitecore.CodeGenerator" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Glass.Mapper.Sc.Fields" #>
<#@ import namespace="Car.Foundation.Models" #>
<#+
// <copyright file="GlassGenerator.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class GlassGenerator : Generator
{

	public GlassMappedClassTemplate GlassTemplate { get; private set; }

	public GlassConstants GlassConstants { get; private set; }

	private Action<string,FieldOptions> SetCustomOptionsFunction { get; set; }

	private string Database { get; set; }

	private string TemplateDirectory { get; set; }

	public string RootNamespace { get; set; }

	private string[] Paths { get; set; }

	public List<string> GeneratedFiles { get; private set; }

   public GlassGenerator(GlassGeneratorParameters parms)
	{
		SetCustomOptionsFunction = parms.GlassCustomFieldOptions.SetCustomFieldOptions;
		Database = parms.TemplateDB;
		Paths = parms.TemplateSitecorePaths;
    TemplateDirectory = parms.TemplateDirectory;
		RootNamespace = parms.RootNamespace;
    GeneratedFiles = new List<string>();
	}


	protected override void RunCore()
	{
		// If you are using Rainbow serialization, you need to make some changes to the following lines
		// This is described on https://github.com/hermanussen/sitecore.codegenerator#using-unicorns-rainbow-format
		this.GlassTemplate = new GlassMappedClassTemplate();
    this.GlassTemplate.Namespace = RootNamespace + ".Models";
		var resolver = new TemplatesResolverRainbow(
			Context.Host.ResolvePath(TemplateDirectory),
			Paths,
			Database);
		foreach(var template in resolver.Templates)
		{
			this.GlassTemplate.Template = template;
			this.GlassTemplate.GetFieldOptionsFunction = GetFieldOptions;
			string fileName = string.Concat("I", this.GlassTemplate.Identifier(template.SyncItem.Name), ".gen.cs");
      
      string filePath = template.SyncItem.ItemPath;
      
      foreach(var path in Paths)
      {
        filePath = filePath.Replace(path,"");
      }

      filePath = filePath.Replace(" ","").Replace("/","\\");

      filePath = filePath.Substring(0,filePath.LastIndexOf("\\"));
			
      this.GlassTemplate.RenderToFile(@"..\Models"+filePath+"\\"+fileName);
			
      this.GeneratedFiles.Add(fileName);
		}
    this.GlassConstants = new GlassConstants();
    this.GlassConstants.Templates = resolver.Templates;
    this.GlassConstants.Namespace = RootNamespace;
		this.GlassConstants.RenderToFile(@"..\Templates.gen.cs");

	}

	public FieldOptions GetFieldOptions(string fieldType, string fieldId)
	{
		FieldOptions result = new FieldOptions();
		switch (fieldType)
		{
			case "Checkbox":
				result.GlassFieldTypeName = "bool";
				break;
			case "Integer":
				result.GlassFieldTypeName = "int";
				break;
			case "Number":
				result.GlassFieldTypeName = typeof(Decimal).Name;
				break;
			case "Date":
			case "Datetime":
				result.GlassFieldTypeName = typeof(DateTime).Name;
				break;
			case "File":
			case "File Drop Area":
				result.GlassFieldTypeName = typeof(File).Name;
				break;
			case "Name Value List":
			case "Name Lookup Value List":
				result.GlassFieldTypeName = typeof(System.Collections.Specialized.NameValueCollection).Name;
				break;
			// case "???": result.GlassFieldTypeName = typeof(HtmlEncodedString).Name; break;
			case "Image":
				result.GlassFieldTypeName = typeof(Image).Name;
				break;
			case "Droplink":
			case "Droptree":
				result.GlassFieldTypeName = "IBaseItem";
        break;
			case "General Link":
			case "General Link with Search":
			case "Version Link":
			case "link":
				result.GlassFieldTypeName = typeof(Link).Name;
				break;
			// case "???": result.GlassFieldTypeName = typeof(LinkType).Name; break;
			case "Tristate":
				result.GlassFieldTypeName = typeof(TriState).Name;
				break;
			default:
				result.GlassFieldTypeName = "string";
				break;
		}
		SetCustomOptionsFunction(fieldId, result);
		return result;
	}
}
#>